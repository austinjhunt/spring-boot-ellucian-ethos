
package sungardhe.workflow.ws.wsdl._1;

import java.util.List;

import javax.xml.datatype.XMLGregorianCalendar;

import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.jws.soap.SOAPBinding;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.Holder;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.ResponseWrapper;
import sungardhe.workflow.ws.messages._1.Authentication;
import sungardhe.workflow.ws.messages._1.NameParameterValuePair;
import sungardhe.workflow.ws.messages._1.ObjectFactory;
import sungardhe.workflow.ws.messages._1.PrimaryKey;
import sungardhe.workflow.ws.messages._1.RoleAssignment;
import sungardhe.workflow.ws.messages._1.UpdateUserAuthenticationRequest;
import sungardhe.workflow.ws.messages._1.UpdateUserAuthenticationResponse;
import sungardhe.workflow.ws.messages._1.UserAttributes;
import sungardhe.workflow.ws.messages._1.UserAuthenticationMethod;

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "WorkflowWSPortType", targetNamespace = "urn:sungardhe:workflow:ws:wsdl:1.1")
@XmlSeeAlso({
                ObjectFactory.class
})
public interface WorkflowWSPortType {

        /**
         * 
         * @param workItemPK
         * @param authentication
         * @throws NotFoundFault
         * @throws CannotCompleteFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @RequestWrapper(localName = "completeWorkItem", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.CompleteWorkItemRequest")
        @ResponseWrapper(localName = "completeWorkItemResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.CompleteWorkItemResponse")
        public void completeWorkItem(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "workItemPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") PrimaryKey workItemPK)
                        throws CannotCompleteFault, NotAuthorizedFault, NotFoundFault;

        /**
         * 
         * @param workItemPK
         * @param authentication
         * @throws NotFoundFault
         * @throws CannotReleaseFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @RequestWrapper(localName = "releaseWorkItem", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.ReleaseWorkItemRequest")
        @ResponseWrapper(localName = "releaseWorkItemResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.ReleaseWorkItemResponse")
        public void releaseWorkItem(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "workItemPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") PrimaryKey workItemPK)
                        throws CannotReleaseFault, NotAuthorizedFault, NotFoundFault;

        /**
         * 
         * @param contextParameter
         * @param workItemPK
         * @param authentication
         * @throws NotFoundFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @RequestWrapper(localName = "setWorkItemContext", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.SetWorkItemContextRequest")
        @ResponseWrapper(localName = "setWorkItemContextResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.SetWorkItemContextResponse")
        public void setWorkItemContext(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "workItemPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") PrimaryKey workItemPK,
                        @WebParam(name = "contextParameter", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") List<NameParameterValuePair> contextParameter)
                        throws NotAuthorizedFault, NotFoundFault;

        /**
         * 
         * @param workItemPK
         * @param authentication
         * @return
         *         returns
         *         java.util.List<sungardhe.workflow.ws.messages._1.NameParameterValuePair>
         * @throws NotFoundFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @WebResult(name = "contextParameter", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1")
        @RequestWrapper(localName = "getWorkItemContext", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.GetWorkItemContextRequest")
        @ResponseWrapper(localName = "getWorkItemContextResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.GetWorkItemContextResponse")
        public List<NameParameterValuePair> getWorkItemContext(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "workItemPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") PrimaryKey workItemPK)
                        throws NotAuthorizedFault, NotFoundFault;

        /**
         * 
         * @param externalDate
         * @param parameter
         * @param eventName
         * @param productTypeName
         * @param externalID
         * @param workflowName
         * @param authentication
         * @param externalSource
         * @return
         *         returns sungardhe.workflow.ws.messages._1.PrimaryKey
         * @throws DuplicateExternalEventFault
         * @throws ExternalEventValidationFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @WebResult(name = "externalEventPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1")
        @RequestWrapper(localName = "postExternalEvent", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.PostExternalEventRequest")
        @ResponseWrapper(localName = "postExternalEventResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.PostExternalEventResponse")
        public PrimaryKey postExternalEvent(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "eventName", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") String eventName,
                        @WebParam(name = "productTypeName", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") String productTypeName,
                        @WebParam(name = "externalSource", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") String externalSource,
                        @WebParam(name = "externalID", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") String externalID,
                        @WebParam(name = "externalDate", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") XMLGregorianCalendar externalDate,
                        @WebParam(name = "workflowName", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") String workflowName,
                        @WebParam(name = "parameter", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") List<NameParameterValuePair> parameter)
                        throws DuplicateExternalEventFault, ExternalEventValidationFault, NotAuthorizedFault;

        /**
         * 
         * @param authenticationMethod
         * @param attributes
         * @param authentication
         * @return
         *         returns sungardhe.workflow.ws.messages._1.PrimaryKey
         * @throws ValidationFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @WebResult(name = "userPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1")
        @RequestWrapper(localName = "createUser", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.CreateUserRequest")
        @ResponseWrapper(localName = "createUserResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.CreateUserResponse")
        public PrimaryKey createUser(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "attributes", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") UserAttributes attributes,
                        @WebParam(name = "authenticationMethod", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") UserAuthenticationMethod authenticationMethod)
                        throws NotAuthorizedFault, ValidationFault;

        /**
         * 
         * @param attributes
         * @param userPK
         * @param authentication
         * @throws ValidationFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @RequestWrapper(localName = "updateUserAttributes", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.UpdateUserAttributesRequest")
        @ResponseWrapper(localName = "updateUserAttributesResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.UpdateUserAttributesResponse")
        public void updateUserAttributes(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "userPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", mode = WebParam.Mode.INOUT) Holder<PrimaryKey> userPK,
                        @WebParam(name = "attributes", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") UserAttributes attributes)
                        throws NotAuthorizedFault, ValidationFault;

        /**
         * 
         * @param attributes
         * @param userPK
         * @param authentication
         * @throws NotFoundFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @RequestWrapper(localName = "getUserAttributes", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.GetUserAttributesRequest")
        @ResponseWrapper(localName = "getUserAttributesResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.GetUserAttributesResponse")
        public void getUserAttributes(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "userPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", mode = WebParam.Mode.INOUT) Holder<PrimaryKey> userPK,
                        @WebParam(name = "attributes", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", mode = WebParam.Mode.OUT) Holder<UserAttributes> attributes)
                        throws NotAuthorizedFault, NotFoundFault;

        /**
         * 
         * @param parameters
         * @return
         *         returns
         *         sungardhe.workflow.ws.messages._1.UpdateUserAuthenticationResponse
         * @throws ValidationFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @WebResult(name = "updateUserAuthenticationResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", partName = "parameters")
        @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
        public UpdateUserAuthenticationResponse updateUserAuthentication(
                        @WebParam(name = "updateUserAuthenticationRequest", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", partName = "parameters") UpdateUserAuthenticationRequest parameters)
                        throws NotAuthorizedFault, ValidationFault;

        /**
         * 
         * @param userPK
         * @param authentication
         * @throws NotFoundFault
         * @throws ValidationFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @RequestWrapper(localName = "deleteUser", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.DeleteUserRequest")
        @ResponseWrapper(localName = "deleteUserResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.DeleteUserResponse")
        public void deleteUser(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "userPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") PrimaryKey userPK)
                        throws NotAuthorizedFault, NotFoundFault, ValidationFault;

        /**
         * 
         * @param roleAssignment
         * @param authentication
         * @return
         *         returns sungardhe.workflow.ws.messages._1.PrimaryKey
         * @throws NotFoundFault
         * @throws ValidationFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @WebResult(name = "assignmentPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1")
        @RequestWrapper(localName = "addRoleAssignmentForUser", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.AddRoleAssignmentForUserRequest")
        @ResponseWrapper(localName = "addRoleAssignmentForUserResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.AddRoleAssignmentForUserResponse")
        public PrimaryKey addRoleAssignmentForUser(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "roleAssignment", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") RoleAssignment roleAssignment)
                        throws NotAuthorizedFault, NotFoundFault, ValidationFault;

        /**
         * 
         * @param authentication
         * @return
         *         returns java.util.List<sungardhe.workflow.ws.messages._1.PrimaryKey>
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @WebResult(name = "userPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1")
        @RequestWrapper(localName = "findUsersWhoAreExternallyAuthenticated", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.FindUsersWhoAreExternallyAuthenticatedRequest")
        @ResponseWrapper(localName = "findUsersWhoAreExternallyAuthenticatedResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.FindUsersWhoAreExternallyAuthenticatedResponse")
        public List<PrimaryKey> findUsersWhoAreExternallyAuthenticated(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication)
                        throws NotAuthorizedFault;

        /**
         * 
         * @param externalID
         * @param authentication
         * @return
         *         returns sungardhe.workflow.ws.messages._1.PrimaryKey
         * @throws NotFoundFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @WebResult(name = "userPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1")
        @RequestWrapper(localName = "findUserByExternalID", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.FindUserByExternalIDRequest")
        @ResponseWrapper(localName = "findUserByExternalIDResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.FindUserByExternalIDResponse")
        public PrimaryKey findUserByExternalID(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "externalID", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") String externalID)
                        throws NotAuthorizedFault, NotFoundFault;

        /**
         * 
         * @param userPK
         * @param authentication
         * @return
         *         returns java.lang.String
         * @throws NotFoundFault
         * @throws NotAuthorizedFault
         */
        @WebMethod
        @WebResult(name = "externalID", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1")
        @RequestWrapper(localName = "getExternalIDForUser", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.GetExternalIDForUserRequest")
        @ResponseWrapper(localName = "getExternalIDForUserResponse", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1", className = "sungardhe.workflow.ws.messages._1.GetExternalIDForUserResponse")
        public String getExternalIDForUser(
                        @WebParam(name = "authentication", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") Authentication authentication,
                        @WebParam(name = "userPK", targetNamespace = "urn:sungardhe:workflow:ws:messages:1.1") PrimaryKey userPK)
                        throws NotAuthorizedFault, NotFoundFault;

}

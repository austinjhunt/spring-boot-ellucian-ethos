
package sungardhe.workflow.ws.wsdl._1;

import java.net.MalformedURLException;
import java.net.URL;
import jakarta.xml.namespace.QName;
import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceException;
import jakarta.xml.ws.WebServiceFeature;

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "WorkflowWS", targetNamespace = "urn:sungardhe:workflow:ws:wsdl:1.1", wsdlLocation = "file:/Users/austinhunt/dev/spring-boot-ellucian-ethos/src/main/java/edu/charleston/spring_boot_ellucian_ethos/WorkflowProd/v1_1.wsdl")
public class WorkflowWS
        extends Service {

    private final static URL WORKFLOWWS_WSDL_LOCATION;
    private final static WebServiceException WORKFLOWWS_EXCEPTION;
    private final static QName WORKFLOWWS_QNAME = new QName("urn:sungardhe:workflow:ws:wsdl:1.1", "WorkflowWS");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL(
                    "file:/Users/austinhunt/dev/spring-boot-ellucian-ethos/src/main/java/edu/charleston/spring_boot_ellucian_ethos/WorkflowProd/v1_1.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        WORKFLOWWS_WSDL_LOCATION = url;
        WORKFLOWWS_EXCEPTION = e;
    }

    public WorkflowWS() {
        super(__getWsdlLocation(), WORKFLOWWS_QNAME);
    }

    public WorkflowWS(WebServiceFeature... features) {
        super(__getWsdlLocation(), WORKFLOWWS_QNAME, features);
    }

    public WorkflowWS(URL wsdlLocation) {
        super(wsdlLocation, WORKFLOWWS_QNAME);
    }

    public WorkflowWS(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, WORKFLOWWS_QNAME, features);
    }

    public WorkflowWS(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WorkflowWS(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *         returns WorkflowWSPortType
     */
    @WebEndpoint(name = "WorkflowWS")
    public WorkflowWSPortType getWorkflowWS() {
        return super.getPort(new QName("urn:sungardhe:workflow:ws:wsdl:1.1", "WorkflowWS"), WorkflowWSPortType.class);
    }

    /**
     * 
     * @param features
     *                 A list of {@link jakarta.xml.ws.WebServiceFeature} to
     *                 configure on the proxy. Supported features not in the
     *                 <code>features</code> parameter will have their default
     *                 values.
     * @return
     *         returns WorkflowWSPortType
     */
    @WebEndpoint(name = "WorkflowWS")
    public WorkflowWSPortType getWorkflowWS(WebServiceFeature... features) {
        return super.getPort(new QName("urn:sungardhe:workflow:ws:wsdl:1.1", "WorkflowWS"), WorkflowWSPortType.class,
                features);
    }

    private static URL __getWsdlLocation() {
        if (WORKFLOWWS_EXCEPTION != null) {
            throw WORKFLOWWS_EXCEPTION;
        }
        return WORKFLOWWS_WSDL_LOCATION;
    }

}
